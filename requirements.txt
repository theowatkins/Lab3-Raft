
RPC Requirements:
    AppendEntries (AE):
        AE1. Reply false if term < currentTerm
            ! Replies not implemented.
        AE2. Reply false if log doesn't contain an entry at prevLogIndex whose term matches prevLogTerm
            ! Replied not implemented.
        AE3. If an existing entry conflicts with a new one (same index but different terms), delete the existing entry and all that follow it
            ! Not implemented.
        AE4. Append any new entries not already in the log
            ! Not implemented.
        AE5. If leaderCommit > commitIndex set commitIndex = ming(leaderCommit, index of last entry)
            ! Not implemented.

    Request Vote (RV):
        (DONE) RV1. Reply false if term < currentTerm
        RV2. if votedFor is null or candidateId, and candidates log is at least as up-to-date as receiver's log, grant vote
            ! Missing check is candidates log is at least as up-to-date

Requirements for Servers :

    All Servers (AS):
        AS1. If commitIndex > lastApplied: increment lastApplied, apply log[lastApplied] to state machines.
            ! Not implemented.
        AS2. If RPC request or response contains term T > currentTerm: setCurrentTerm = T, convert to follower
            ! Not implemented.

    Followers (F):
        F1. Respond to RPCs from candidates and leaders
            A. AppendEntries response
            (DONE) B. RequestVote response
        (DONE) F2. If election timeout elapses without receiving AppendEntries from current leader or granting vote to candidate: convert to candidate

    Candidates (C):
        C1. On conversion to candidate, start election. Includes: increment current term, vote for self, reset election timer, send RequestVote RPC to all other servers
            ! Missing resetting election timer
        (DONE) C2. If votes received from majority of serves: become leader
        3. If AppendEntries RPC received from new leader: convert to follower
            ! Missing check if RPC from leader to leader.
        (DONE) C4. If election timeout elapses: start new election


    Leaders (L):
        (DONE) L1. Upon election: send initial empty AppendEntries RPCs (heartbeat ) to each server; repeat during idle periods to prevent election timeouts
        L2. If command received from client: append entry to local log, respond after entry applied to state machine
            ! Not implemented.
        L3. If last log index >= nextIndex for a follower: send AppendEntries RPC with log entries starting at nextIndex.
            ! Not implemented.
        L3.1 If successful: update nextIndex and matchIndex for follower
            ! Not implemented.
        L3.2 If AppendEntries fails because of log inconsistency: decrement nextIndex and retry
            ! Not implemented.
        L4. If there exists an N such that N > commitIndex, a majority of matchIndex[i] >= N, and log[N].term == currentTerm: set commitIndex = N
            ! Not implemented.

Persistent State Requirements:
    (DONE) P1. save and restore persistent state from a Persister object (see persister.go)
     P2. Whoever calls Raft.Make() supplies a Persister that initially holds Raft's most recently persisted state (if any)
        ! Raft.Make Not implemented.
    (DONE) P3. Raft should initialize its state from that Persister, and should use it to save its persistent state each



