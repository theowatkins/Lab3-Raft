
RPC Requirements:
    AppendEntries (AE):
        (DONE) AE1. Reply false if term < currentTerm
        (DONE) AE2. Reply false if log doesn't contain an entry at prevLogIndex whose term matches prevLogTerm
        (DONE) AE3. If an existing entry conflicts with a new one (same index but different terms), delete the existing entry and all that follow it
        (DONE) AE4. Append any new entries not already in the log
        (DONE) AE5. If leaderCommit > commitIndex set commitIndex = min(leaderCommit, index of last entry)

    Request Vote (RV):
        (DONE) RV1. Reply false if term < currentTerm
        (DONE) RV2. if votedFor is null or candidateId, and candidates log is at least as up-to-date as receiver's log, grant vote

Requirements for Servers :

    All Servers (AS):
        (DONE) AS1. If commitIndex > lastApplied: increment lastApplied, apply log[lastApplied] to state machines.
        (DONE) AS2. If RPC request or response contains term T > currentTerm: setCurrentTerm = T, convert to follower

    Followers (F):
        (DONE) F1. Respond to RPCs from candidates and leaders
        (DONE) F2. If election timeout elapses without receiving AppendEntries from current leader or granting vote to candidate: convert to candidate

    Candidates (C):
        (DONE) C1. On conversion to candidate, start election. Includes: increment current term, vote for self, reset election timer, send RequestVote RPC to all other servers
        (DONE) C2. If votes received from majority of serves: become leader
        (DONE) C3. If AppendEntries RPC received from new leader: convert to follower
        (DONE) C4. If election timeout elapses: start new election


    Leaders (L):
        (DONE) L1. Upon election: send initial empty AppendEntries RPCs (heartbeat ) to each server; repeat during idle periods to prevent election timeouts
        (DONE) L2. If command received from client: append entry to local log, respond after entry applied to state machine
        (DONE) L3. If last log index >= nextIndex for a follower: send AppendEntries RPC with log entries starting at nextIndex.
        (DONE) L4. If there exists an N such that N > commitIndex, a majority of matchIndex[i] >= N, and log[N].term == currentTerm: set commitIndex = N

Persistent State Requirements:
    (DONE) P1. save and restore persistent state from a Persister object (see persister.go)
    (DONE) P2. Whoever calls Raft.Make() supplies a Persister that initially holds Raft's most recently persisted state (if any)
    (DONE) P3. Raft should initialize its state from that Persister, and should use it to save its persistent state each



